Metadata-Version: 2.2
Name: pymach
Version: 0.0.1
Summary: Execute machine code from Python
Author-email: Adam Jenca <jenca.adam@gmail.com>
Maintainer-email: Adam Jenca <jenca.adam@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Adam Jenƒça
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/jenca-adam/pymach
Project-URL: Bug Reports, https://github.com/jenca-adam/pymach/issues
Keywords: machine_code,linux
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: C
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Intended Audience :: Developers
Description-Content-Type: text/markdown
License-File: LICENSE

# pymach
Execute machine code in Python.
Linux only (for now).
For examples see the `examples` directory.
## Installation
```
pip install .
```
## Usage
### Calling
`pymach.Code(machine_code, argtypes, restype)(...)` 
`argtypes` : a list of ctypes types
`restype`: a ctypes type or None
### Patching
Patching allows you to modify the machine code after it has been saved into memory.
Use the `Code.patch()` method to do it.
Example:
```python
code = (
    b"\x48\xC7\xC0\x01\x00\x00\x00"  # mov rax, 1         (sys_write)
    b"\x48\xC7\xC7\x01\x00\x00\x00"  # mov rdi, 1         (stdout)
    b"\x48\xBE\x00\x00\x00\x00\x00\x00\x00\x00"  # movabs rsi, <placeholder>
    b"\x48\xC7\xC2\x0E\x00\x00\x00"  # mov rdx, 13        (length)
    b"\x0F\x05"                      # syscall (write)
    b"\xc3"                          # ret
    b"Hello, World!\n"               # String stored in memory
)
addr_offset=code.index(bytes(8)) #find placeholder address
hello_offset=code.index(b'Hello, World!\n') #find hello world address
hello_world = pymach.Code(code, [], None) # create function
hello_addr = hello_world.mmap.ptr+hello_offset # get address
hello_addr_bytes = hello_addr.to_bytes(8, "little") # create bytes
hello_world.patch(hello_addr_bytes, addr_offset)
hello_world()
```
